
#pragma once
#include "KernelConfig.h"
#include "kernel.cuh"
#include <iostream>
// THIS FILE IS AUTO-GENERATED BY generate_dispatcher.py
// DO NOT EDIT MANUALLY
#define CUDA_CHECK(call) \
  do { \
    cudaError_t err = call; \
    if (err != cudaSuccess) { \
      fprintf(stderr, "CUDA Error at %s:%d: %s\n", __FILE__, __LINE__, \
              cudaGetErrorString(err)); \
      exit(EXIT_FAILURE); \
    } \
  } while (0)
void launch_kernel_with_config(const KernelConfig &config, float *d_C,
                              const float *d_A, const float *d_B, int M, int N,
                              int K) {
    dim3 blockDim(config.BLOCK_DIM_X, config.BLOCK_DIM_Y);
    dim3 gridDim((N + config.TILE_N - 1) / config.TILE_N,
                 (M + config.TILE_M - 1) / config.TILE_M);
    size_t shared_size = (static_cast<size_t>(config.TILE_M) * config.TILE_K +
                          static_cast<size_t>(config.TILE_K) * config.TILE_N) *
                         sizeof(float);
    if (config.TILE_M == 4 && config.TILE_N == 4 && config.TILE_K == 4 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 4, 4, 4, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 4 && config.TILE_K == 8 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 4, 8, 4, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 4 && config.TILE_K == 16 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 4, 16, 4, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 4 && config.TILE_K == 32 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 4, 32, 4, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 4 && config.TILE_K == 64 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 4, 64, 4, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 8 && config.TILE_K == 4 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 8, 4, 8, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 8 && config.TILE_K == 8 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 8, 8, 8, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 8 && config.TILE_K == 16 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 8, 16, 8, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 8 && config.TILE_K == 32 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 8, 32, 8, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 8 && config.TILE_K == 64 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 8, 64, 8, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 16 && config.TILE_K == 4 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 16, 4, 16, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 16 && config.TILE_K == 8 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 16, 8, 16, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 16 && config.TILE_K == 16 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 16, 16, 16, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 16 && config.TILE_K == 32 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 16, 32, 16, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 16 && config.TILE_K == 64 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 16, 64, 16, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 32 && config.TILE_K == 4 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 32, 4, 32, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 32 && config.TILE_K == 8 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 32, 8, 32, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 32 && config.TILE_K == 16 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 32, 16, 32, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 32 && config.TILE_K == 32 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 32, 32, 32, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 32 && config.TILE_K == 64 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 32, 64, 32, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 64 && config.TILE_K == 4 && config.BLOCK_DIM_X == 64 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 64, 4, 64, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 64 && config.TILE_K == 8 && config.BLOCK_DIM_X == 64 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 64, 8, 64, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 64 && config.TILE_K == 16 && config.BLOCK_DIM_X == 64 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 64, 16, 64, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 64 && config.TILE_K == 32 && config.BLOCK_DIM_X == 64 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 64, 32, 64, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 64 && config.TILE_K == 64 && config.BLOCK_DIM_X == 64 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 64, 64, 64, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 128 && config.TILE_K == 4 && config.BLOCK_DIM_X == 128 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 128, 4, 128, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 128 && config.TILE_K == 8 && config.BLOCK_DIM_X == 128 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 128, 8, 128, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 128 && config.TILE_K == 16 && config.BLOCK_DIM_X == 128 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 128, 16, 128, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 128 && config.TILE_K == 32 && config.BLOCK_DIM_X == 128 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 128, 32, 128, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 128 && config.TILE_K == 64 && config.BLOCK_DIM_X == 128 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 128, 64, 128, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 256 && config.TILE_K == 4 && config.BLOCK_DIM_X == 256 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 256, 4, 256, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 256 && config.TILE_K == 8 && config.BLOCK_DIM_X == 256 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 256, 8, 256, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 256 && config.TILE_K == 16 && config.BLOCK_DIM_X == 256 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 256, 16, 256, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 4 && config.TILE_N == 256 && config.TILE_K == 32 && config.BLOCK_DIM_X == 256 && config.BLOCK_DIM_Y == 4) {
    matrix_multiply_kernel<4, 256, 32, 256, 4><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 4 && config.TILE_K == 4 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 4, 4, 4, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 4 && config.TILE_K == 8 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 4, 8, 4, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 4 && config.TILE_K == 16 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 4, 16, 4, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 4 && config.TILE_K == 32 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 4, 32, 4, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 4 && config.TILE_K == 64 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 4, 64, 4, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 8 && config.TILE_K == 4 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 8, 4, 8, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 8 && config.TILE_K == 8 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 8, 8, 8, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 8 && config.TILE_K == 16 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 8, 16, 8, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 8 && config.TILE_K == 32 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 8, 32, 8, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 8 && config.TILE_K == 64 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 8, 64, 8, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 16 && config.TILE_K == 4 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 16, 4, 16, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 16 && config.TILE_K == 8 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 16, 8, 16, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 16 && config.TILE_K == 16 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 16, 16, 16, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 16 && config.TILE_K == 32 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 16, 32, 16, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 16 && config.TILE_K == 64 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 16, 64, 16, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 32 && config.TILE_K == 4 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 32, 4, 32, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 32 && config.TILE_K == 8 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 32, 8, 32, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 32 && config.TILE_K == 16 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 32, 16, 32, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 32 && config.TILE_K == 32 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 32, 32, 32, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 32 && config.TILE_K == 64 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 32, 64, 32, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 64 && config.TILE_K == 4 && config.BLOCK_DIM_X == 64 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 64, 4, 64, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 64 && config.TILE_K == 8 && config.BLOCK_DIM_X == 64 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 64, 8, 64, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 64 && config.TILE_K == 16 && config.BLOCK_DIM_X == 64 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 64, 16, 64, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 64 && config.TILE_K == 32 && config.BLOCK_DIM_X == 64 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 64, 32, 64, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 64 && config.TILE_K == 64 && config.BLOCK_DIM_X == 64 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 64, 64, 64, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 128 && config.TILE_K == 4 && config.BLOCK_DIM_X == 128 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 128, 4, 128, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 128 && config.TILE_K == 8 && config.BLOCK_DIM_X == 128 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 128, 8, 128, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 128 && config.TILE_K == 16 && config.BLOCK_DIM_X == 128 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 128, 16, 128, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 128 && config.TILE_K == 32 && config.BLOCK_DIM_X == 128 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 128, 32, 128, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 8 && config.TILE_N == 128 && config.TILE_K == 64 && config.BLOCK_DIM_X == 128 && config.BLOCK_DIM_Y == 8) {
    matrix_multiply_kernel<8, 128, 64, 128, 8><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 4 && config.TILE_K == 4 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 4, 4, 4, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 4 && config.TILE_K == 8 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 4, 8, 4, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 4 && config.TILE_K == 16 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 4, 16, 4, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 4 && config.TILE_K == 32 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 4, 32, 4, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 4 && config.TILE_K == 64 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 4, 64, 4, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 8 && config.TILE_K == 4 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 8, 4, 8, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 8 && config.TILE_K == 8 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 8, 8, 8, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 8 && config.TILE_K == 16 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 8, 16, 8, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 8 && config.TILE_K == 32 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 8, 32, 8, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 8 && config.TILE_K == 64 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 8, 64, 8, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 16 && config.TILE_K == 4 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 16, 4, 16, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 16 && config.TILE_K == 8 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 16, 8, 16, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 16 && config.TILE_K == 16 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 16, 16, 16, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 16 && config.TILE_K == 32 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 16, 32, 16, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 16 && config.TILE_K == 64 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 16, 64, 16, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 32 && config.TILE_K == 4 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 32, 4, 32, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 32 && config.TILE_K == 8 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 32, 8, 32, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 32 && config.TILE_K == 16 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 32, 16, 32, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 32 && config.TILE_K == 32 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 32, 32, 32, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 32 && config.TILE_K == 64 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 32, 64, 32, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 64 && config.TILE_K == 4 && config.BLOCK_DIM_X == 64 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 64, 4, 64, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 64 && config.TILE_K == 8 && config.BLOCK_DIM_X == 64 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 64, 8, 64, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 64 && config.TILE_K == 16 && config.BLOCK_DIM_X == 64 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 64, 16, 64, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 64 && config.TILE_K == 32 && config.BLOCK_DIM_X == 64 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 64, 32, 64, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 16 && config.TILE_N == 64 && config.TILE_K == 64 && config.BLOCK_DIM_X == 64 && config.BLOCK_DIM_Y == 16) {
    matrix_multiply_kernel<16, 64, 64, 64, 16><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 4 && config.TILE_K == 4 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 4, 4, 4, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 4 && config.TILE_K == 8 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 4, 8, 4, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 4 && config.TILE_K == 16 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 4, 16, 4, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 4 && config.TILE_K == 32 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 4, 32, 4, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 4 && config.TILE_K == 64 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 4, 64, 4, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 8 && config.TILE_K == 4 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 8, 4, 8, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 8 && config.TILE_K == 8 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 8, 8, 8, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 8 && config.TILE_K == 16 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 8, 16, 8, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 8 && config.TILE_K == 32 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 8, 32, 8, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 8 && config.TILE_K == 64 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 8, 64, 8, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 16 && config.TILE_K == 4 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 16, 4, 16, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 16 && config.TILE_K == 8 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 16, 8, 16, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 16 && config.TILE_K == 16 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 16, 16, 16, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 16 && config.TILE_K == 32 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 16, 32, 16, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 16 && config.TILE_K == 64 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 16, 64, 16, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 32 && config.TILE_K == 4 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 32, 4, 32, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 32 && config.TILE_K == 8 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 32, 8, 32, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 32 && config.TILE_K == 16 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 32, 16, 32, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 32 && config.TILE_K == 32 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 32, 32, 32, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 32 && config.TILE_N == 32 && config.TILE_K == 64 && config.BLOCK_DIM_X == 32 && config.BLOCK_DIM_Y == 32) {
    matrix_multiply_kernel<32, 32, 64, 32, 32><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 64 && config.TILE_N == 4 && config.TILE_K == 4 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 64) {
    matrix_multiply_kernel<64, 4, 4, 4, 64><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 64 && config.TILE_N == 4 && config.TILE_K == 8 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 64) {
    matrix_multiply_kernel<64, 4, 8, 4, 64><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 64 && config.TILE_N == 4 && config.TILE_K == 16 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 64) {
    matrix_multiply_kernel<64, 4, 16, 4, 64><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 64 && config.TILE_N == 4 && config.TILE_K == 32 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 64) {
    matrix_multiply_kernel<64, 4, 32, 4, 64><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 64 && config.TILE_N == 4 && config.TILE_K == 64 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 64) {
    matrix_multiply_kernel<64, 4, 64, 4, 64><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 64 && config.TILE_N == 8 && config.TILE_K == 4 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 64) {
    matrix_multiply_kernel<64, 8, 4, 8, 64><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 64 && config.TILE_N == 8 && config.TILE_K == 8 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 64) {
    matrix_multiply_kernel<64, 8, 8, 8, 64><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 64 && config.TILE_N == 8 && config.TILE_K == 16 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 64) {
    matrix_multiply_kernel<64, 8, 16, 8, 64><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 64 && config.TILE_N == 8 && config.TILE_K == 32 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 64) {
    matrix_multiply_kernel<64, 8, 32, 8, 64><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 64 && config.TILE_N == 8 && config.TILE_K == 64 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 64) {
    matrix_multiply_kernel<64, 8, 64, 8, 64><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 64 && config.TILE_N == 16 && config.TILE_K == 4 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 64) {
    matrix_multiply_kernel<64, 16, 4, 16, 64><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 64 && config.TILE_N == 16 && config.TILE_K == 8 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 64) {
    matrix_multiply_kernel<64, 16, 8, 16, 64><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 64 && config.TILE_N == 16 && config.TILE_K == 16 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 64) {
    matrix_multiply_kernel<64, 16, 16, 16, 64><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 64 && config.TILE_N == 16 && config.TILE_K == 32 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 64) {
    matrix_multiply_kernel<64, 16, 32, 16, 64><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 64 && config.TILE_N == 16 && config.TILE_K == 64 && config.BLOCK_DIM_X == 16 && config.BLOCK_DIM_Y == 64) {
    matrix_multiply_kernel<64, 16, 64, 16, 64><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 128 && config.TILE_N == 4 && config.TILE_K == 4 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 128) {
    matrix_multiply_kernel<128, 4, 4, 4, 128><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 128 && config.TILE_N == 4 && config.TILE_K == 8 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 128) {
    matrix_multiply_kernel<128, 4, 8, 4, 128><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 128 && config.TILE_N == 4 && config.TILE_K == 16 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 128) {
    matrix_multiply_kernel<128, 4, 16, 4, 128><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 128 && config.TILE_N == 4 && config.TILE_K == 32 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 128) {
    matrix_multiply_kernel<128, 4, 32, 4, 128><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 128 && config.TILE_N == 4 && config.TILE_K == 64 && config.BLOCK_DIM_X == 4 && config.BLOCK_DIM_Y == 128) {
    matrix_multiply_kernel<128, 4, 64, 4, 128><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 128 && config.TILE_N == 8 && config.TILE_K == 4 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 128) {
    matrix_multiply_kernel<128, 8, 4, 8, 128><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 128 && config.TILE_N == 8 && config.TILE_K == 8 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 128) {
    matrix_multiply_kernel<128, 8, 8, 8, 128><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 128 && config.TILE_N == 8 && config.TILE_K == 16 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 128) {
    matrix_multiply_kernel<128, 8, 16, 8, 128><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 128 && config.TILE_N == 8 && config.TILE_K == 32 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 128) {
    matrix_multiply_kernel<128, 8, 32, 8, 128><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }    else if (config.TILE_M == 128 && config.TILE_N == 8 && config.TILE_K == 64 && config.BLOCK_DIM_X == 8 && config.BLOCK_DIM_Y == 128) {
    matrix_multiply_kernel<128, 8, 64, 8, 128><<<gridDim, blockDim, shared_size>>>(d_C, d_A, d_B, M, N, K);
    }
    else {
        std::cerr << "FATAL: Unsupported kernel configuration: " << config.toString() << std::endl;
        exit(1);
    }
    CUDA_CHECK(cudaGetLastError());
}
